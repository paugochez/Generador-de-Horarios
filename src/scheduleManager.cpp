#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>

using namespace std;


// Structure to define my subjects my name, credits and sign
struct subject {
  string sigla;
  string nombre;
  int creditos;
};

//Structure to define each available class
struct timeTable  {
  string sigla;
  string curso;
  string grupo;
  string horario;
  timeTable *ptrOption= NULL; // if there's 2 or more possible courses, points to the next one, if not to NULL
};




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////Funcion lista NO TOCAR//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Function to trim .txt generated by ptyhon
vector<subject*> trimSubjects(string txtName){
  vector<subject*> subjectsLeft; // Vector that stores my objects "Subject"
  string line;
  ifstream myfile (txtName); // Imports input file

  if (myfile.is_open())   //open and read file
    {
      while ( getline (myfile,line) ) // Scans each line of the file...
	{
	  subject *newSubject = new subject; // and creates a new Subject
	  string delimiter = "\t"; // the slicing is made by \t separator
	  size_t pos = 0;  
	  string token;
	  int count = 0; // Count to correctly assign each Subject element
	  int limit = 3;  // Amount of elements in Subject 
	   
	  while ((pos = line.find(delimiter)) != string::npos) {  //Loop to trim .txt

	    token = line.substr(0, pos);   // gets each line space

	    // Assigns Subjects element
	    if (count == 0){
	      newSubject->sigla = token;
	    }
	    if (count == 1){
	      newSubject->nombre = token;
	    }
	    if (count == 2){
	      newSubject->creditos = stoi(token);
	    }

	    line.erase(0, pos + delimiter.length());
	    count+=1;
	    
	    if (count == limit){
	      count = 0;
	      subjectsLeft.push_back(newSubject); //Concatenates the subjects in my list of subjects
	    }
	  }
	}
      myfile.close();
      
    }
  
  else cout << "Unable to open file";
  
  return subjectsLeft;
}

////////////////////////////////////Final de NO TOCAR/////////////////////////////////////////////////////////////////

// Function to trim .txt to get all available courses

vector<timeTable*> trimFile(string txtName, vector<string> targetSub){
  vector<timeTable*> availableUseful; // Vector that stores my objects "Subject"
  string line;
  ifstream myfile (txtName); // Imports input file

  cout << "Tamano target:" << targetSub.size() << endl;
  
  for (int i = 0 ; i < targetSub.size() ; i++){
    cout << "Sigla a buscar:" << targetSub[i] << endl;
  }
  
  if (myfile.is_open())   //open and read file
    {
      
      while ( getline (myfile,line) ) // Scans each line of the file...
	{
	    string delimiter = "\t"; // the slicing is made by \t separator
	    size_t pos = 0;  
	    string token;
	    int count = 0; // Count to correctly assign each Subject element
	    int limit = 3;  // Amount of elements in Subject
	    int control = 0 ;
	    timeTable *newSubject = new timeTable; // and creates a new Subject
	   
	    while ((pos = line.find(delimiter)) != string::npos) {  //Loop to trim .txt

	      token = line.substr(0, pos);   // gets each line space
	      
	      if (count == 0 ) {
		for (int i = 0 ; i < targetSub.size() ; i++){
		  if (targetSub[i] == token) {
		    control += 1 ;
		  }
		}
	      }
	      
	      // Assigns Subjects element
	      if (count == 0 && control == 1){
		
		newSubject->sigla = token; 
	      }
	      /*if (count == 1 && control == 1 ){
		cout << "\t Curso: " << token << endl ;
		newSubject->curso = token;
		} */
	      if (count == 1 && control == 1){
		cout << "\t Grupo: " << token << endl ;
		newSubject->grupo = stoi(token);

	      }
	      if (count == 2 && control == 1){
	        
		cout << "Horario: "<< token << endl;
		newSubject->horario = token;
	      }
	    
	      line.erase(0, pos + delimiter.length());
	      count+=1;
		
	      if (count == limit){
		count = 0;
		availableUseful.push_back(newSubject); //Concatenates the subjects in my list of subjects
	      }
	      
	       
	  } // while pos
	}
      myfile.close();
      
    }
  
  else cout << "Unable to open file";
  
  return availableUseful;
}

//Function to generate Schedule
vector<timeTable> timeTableGenerator(vector<timeTable*> schedules )
{
  vector<int> hash ; // Vector that contains the number of subjects per course
  int control = 0 ;  // position of courses
  for(int i = 1 ; i<schedules.size() ; i++){
    hash[control] +=1;
    if(schedules[i]->sigla == schedules[i-1]->sigla){
      hash[control] +=1; // keeps track of how many equal schedule
    }
    else {
      control +=1 ;
      hash[control] +=1;
    }
  }
}

int main() {

  //system("python3 ./bin/web_main.py b53375 @Manati666"); //bash call to run python underneath to obtain coursesLeft

  vector<subject*> subjectsLeft;    // Courses left

  subjectsLeft = trimSubjects("cursos.txt"); // Call to trimSubjects to obtain the python call output

  cout << "Los cursos encontrados fueron: " << endl;

  for ( int i=0 ; i < subjectsLeft.size() ; i++)
    {
      cout<< i << ". \t" << subjectsLeft[i]->nombre << endl;
    }

  cout << "Ingrese el numero que corresponde a los cursos que desea llevar,separado por espacio" << endl;
  
  int cargaAcademica = 0;
  int x = 0;
  vector<int> key; // Contains the desired courses 

  string line;
  getline(cin, line);
  istringstream iss (line); // Istream to slice the line by int inputs 
  while ( iss >> x)
    key.push_back(x); // and store it's raw elements in key

  vector<string> keySub; 
  
  cout << "Se generara un horario para los siguientes cursos:" << endl;
  
  for ( int i=0 ; i < key.size() ; i++)
    {
      cout<< "-" << subjectsLeft[key[i]]->nombre << endl;
      cargaAcademica += subjectsLeft[key[i]]->creditos;
      keySub.push_back(subjectsLeft[key[i]]->sigla);
    }
  
  cout << "Con una carga academica de " << cargaAcademica << " creditos" << endl;

  vector<timeTable*> keyTo ;
  keyTo = trimFile("cursos.tsv",keySub);
  
  timeTableGenerator(keyTo);
 
  return 0;
}




